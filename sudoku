Write a function that will solve a 9x9 Sudoku puzzle. The function will take one argument consisting of the 2D puzzle array, with the value 0 representing an unknown square.

The Sudokus tested against your function will be "easy" (i.e. determinable; there will be no need to assume and test possibilities on unknowns) and can be solved with a brute-force approach.

For Sudoku rules, see the Wikipedia article.

var puzzle = [
            [5,3,0,0,7,0,0,0,0],
            [6,0,0,1,9,5,0,0,0],
            [0,9,8,0,0,0,0,6,0],
            [8,0,0,0,6,0,0,0,3],
            [4,0,0,8,0,3,0,0,1],
            [7,0,0,0,2,0,0,0,6],
            [0,6,0,0,0,0,2,8,0],
            [0,0,0,4,1,9,0,0,5],
            [0,0,0,0,8,0,0,7,9]];

sudoku(puzzle);
/* Should return
[[5,3,4,6,7,8,9,1,2],
[6,7,2,1,9,5,3,4,8],
[1,9,8,3,4,2,5,6,7],
[8,5,9,7,6,1,4,2,3],
[4,2,6,8,5,3,7,9,1],
[7,1,3,9,2,4,8,5,6],
[9,6,1,5,3,7,2,8,4],
[2,8,7,4,1,9,6,3,5],
[3,4,5,2,8,6,1,7,9]]


---------------------------------------------------------------------------------------------------


Solution: Python

import math

n = 9
nb = int(math.sqrt(n))
n2 = n * n
blank = 0
row = 0
col = 0
block = 0
solved = False

def get2dmatrix(n, m, val):
    return [[val for j in xrange(m)] for i in xrange(n)]

def dfs(a, idx):   
    global solved, blank, row, col, block, n, nb, n2
    
    if solved:
        return
    if idx == len(blank):
        solved = True
        return
    
    x = blank[idx] / n
    y = blank[idx] % n
    for i in xrange(n):
        if row[x][i] or col[y][i] or block[x / nb * nb + y / nb][i]:
            continue
        row[x][i] = col[y][i] = block[x / nb * nb + y / nb][i] = True
        a[x][y] = i + 1
        dfs(a, idx + 1)
        if solved:
            return
        a[x][y] = 0
        row[x][i] = col[y][i] = block[x / nb * nb + y / nb][i] = False

def sudoku(a):
    global solved, blank, row, col, block, n, nb, n2
    
    blank = []
    row = get2dmatrix(n, n, False)
    col = get2dmatrix(n, n, False)
    block = get2dmatrix(n, n, False)
    
    for i in xrange(n2):
        x = i / n
        y = i % n
        val = a[x][y]
        if val > 0:
            row[x][val - 1] = True
            col[y][val - 1] = True
            block[x / nb * nb + y / nb][val - 1] = True
        else:
            blank.append(i)
    solved = False
    dfs(a, 0)
    
    return a
    
    
    -------------------
    Clever solution:
    
    from itertools import product

def possibles(puzzle, x, y):
    a, b = 3*(x/3), 3*(y/3)
    square = set([puzzle[r][c] for r, c in product(range(a,a + 3), range(b,b + 3))])
    row = set(puzzle[x])
    col = set(zip(*puzzle)[y])
    return set(range(1,10)).difference(square.union(row).union(col))

def sudoku(puzzle):
    z = [(r,c) for (r,c) in product(range(9),range(9)) if puzzle[r][c] == 0]    
    if z == []: 
        return puzzle
    for (r,c) in z:
        p = possibles(puzzle, r, c)
        if len(p) == 1:
            puzzle[r][c] = p.pop()
    return sudoku(puzzle)
